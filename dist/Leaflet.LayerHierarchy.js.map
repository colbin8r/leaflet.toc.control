{"version":3,"sources":["Leaflet.LayerHierarchy.js"],"names":["LayerHierarchy","options","_layers","Array","isArray","layers","layer","parentID","TypeError","getLayerByID","addChild","push","id","children","i","length","recursiveResult"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,c;AACnB,0BAAYC,OAAZ,EAAqB;AAAA;;AACnB;AACA;AACA,QAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,gBAAU,EAAV;AACD;AACD,SAAKC,OAAL,GAAgBC,MAAMC,OAAN,CAAcH,QAAQI,MAAtB,IAAgCJ,QAAQI,MAAxC,GAAiD,EAAjE;AACD;;AAED;AACA;AACA;;;;;6BACSC,K,EAAOC,Q,EAAU;AACxB;AACA;;AAEA,UAAI,EAAED,kCAAF,CAAJ,EAAqC;AACnC,cAAM,IAAIE,SAAJ,CAAc,4BAAd,CAAN;AACD;;AAED,UAAI,OAAOD,QAAP,IAAmB,WAAvB,EAAoC;AAClC;AACA,aAAKE,YAAL,CAAkBF,QAAlB,EAA4BG,QAA5B,CAAqCJ,KAArC;AACD,OAHD,MAGO;AACL;AACA,aAAKJ,OAAL,CAAaS,IAAb,CAAkBL,KAAlB;AACD;AACF;;AAED;;;;iCACaM,E,EAAIC,Q,EAAU;;AAEzB;AACA,UAAI,CAACA,QAAL,EAAe;AACbA,mBAAW,KAAKX,OAAhB;AACD;;AAED,WAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAID,SAASE,MAA7B,EAAqCD,GAArC,EAA0C;;AAExC;AACA,YAAID,SAASC,CAAT,EAAYF,EAAZ,IAAkBA,EAAtB,EAA0B;AACxB;AACA,iBAAOC,SAASC,CAAT,CAAP;AAED,SAJD,MAIO;;AAEL;AACA,cAAID,SAASC,CAAT,EAAYD,QAAZ,IAAwBA,SAASC,CAAT,EAAYD,QAAZ,CAAqBE,MAArB,GAA8B,CAA1D,EAA6D;;AAE3D;AACA,gBAAIC,kBAAkB,KAAKP,YAAL,CAAkBG,EAAlB,EAAsBC,SAASC,CAAT,EAAYD,QAAlC,CAAtB;AACA,gBAAIG,oBAAoB,IAAxB,EAA8B;AAC5B,qBAAOA,eAAP;AACD;AAEF;AACF;AAEF;;AAED;AACA,aAAO,IAAP;AACD;;;oCAEe;AACd,aAAO,KAAKd,OAAZ;AACD;;;;;;kBAnEkBF,c","file":"Leaflet.LayerHierarchy.js","sourcesContent":["import L from 'leaflet-headless';\nimport NestedLayer from './Leaflet.NestedLayer';\n\nexport default class LayerHierarchy {\n  constructor(options) {\n    // for the layers parameter, ensure that we are at least passed an array\n    // otherwise, default to empty array\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n    this._layers = (Array.isArray(options.layers) ? options.layers : []);\n  }\n\n  // adds a new NestedLayer object into the tree\n  // defaults to insertion at the root of the tree, but with a parentID\n  // you may insert underneath any other NestedLayer in the tree\n  addLayer(layer, parentID) {\n    // id, name, layer, defaultVisibility, minScale, maxScale, children\n    // layer should be a NestedLayer\n\n    if (!(layer instanceof NestedLayer)) {\n      throw new TypeError('layer is not a NestedLayer');\n    }\n\n    if (typeof parentID != 'undefined') {\n      // add as child\n      this.getLayerByID(parentID).addChild(layer);\n    } else {\n      // no parent, add at root level\n      this._layers.push(layer);\n    }\n  }\n\n  // looks up NestedLayer object by traversing the tree\n  getLayerByID(id, children) {\n\n    // if the function was not called recursively\n    if (!children) {\n      children = this._layers;\n    }\n\n    for (var i = 0; i < children.length; i++) {\n\n      // if the child matches\n      if (children[i].id == id) {\n        // return the child\n        return children[i];\n\n      } else {\n\n        // if the child has its own children\n        if (children[i].children && children[i].children.length > 0) {\n\n          // reucrisvely check them\n          let recursiveResult = this.getLayerByID(id, children[i].children);\n          if (recursiveResult !== null) {\n            return recursiveResult;\n          }\n\n        }\n      }\n\n    }\n\n    // if execution reaches here, no layers in this subtree have the requested id\n    return null;\n  }\n\n  getRootLayers() {\n    return this._layers;\n  }\n\n}\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}