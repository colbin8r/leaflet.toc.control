{"version":3,"sources":["Leaflet.Control.NestedLayers.js"],"names":["NestedLayersComponent","props","layer","children","length","leaves","map","makeComponentFromLayer","id","roots","hierarchy","getRootLayers","components","i","push","Component","NestedLayerComponent","toggleSelected","l","selected","swatch","name","propTypes","instanceOf","isRequired","NestedLayers","element","options","Error","_options","Object","assign","_component","_isAttached","attach","isAttachedz","render","component","isAttached","unmountComponentAtNode","_hierarchy","val","_element"],"mappings":"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","file":"Leaflet.Control.NestedLayers.js","sourcesContent":["import L from 'leaflet-headless';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport LayerHierarchy from './Leaflet.LayerHierarchy';\nimport NestedLayer from './Leaflet.NestedLayer';\n\nexport class NestedLayersComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // primary prop is 'hierarchy', an instance of Leaflet.LayerHierarchy\n  }\n\n  makeComponentFromLayer(layer) {\n    // recursive function\n    // 'leaf' is the base case\n\n    // branch: this layer has children\n    if (layer.children.length < 0) {\n      // recursively calls this function on each child (leaf)\n      // 'leaves' will be an array of JSX components (NestedLayerComponent) for each child (leaf)\n      const leaves = layer.children.map(this.makeComponentFromLayer);\n\n      return (\n        <NestedLayerComponent l={layer}>\n          <ul className=\"branch\">\n            {leaves}\n          </ul>\n        </NestedLayerComponent>\n      );\n    } else {\n    // leaf: this layer is just a leaf\n      return (\n        <NestedLayerComponent l={layer} key={layer.id} />\n      )\n    }\n  }\n\n  render() {\n    let roots = this.props.hierarchy.getRootLayers();\n    let components = [];\n\n    for (let i = 0; i < roots.length; i++) {\n      components.push(this.makeComponentFromLayer(roots[i]));\n    }\n\n    return (\n      <div className=\"nested-layer-control-container\">\n        TOC CONTROL\n        {components}\n      </div>\n    );\n  }\n}\n\nexport class NestedLayerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.state = {date: new Date()};\n  }\n\n  static propTypes = {\n    l: PropTypes.instanceOf(NestedLayer).isRequired\n  }\n\n  toggleSelected = () => {\n    debugger;\n    this.props.l.toggleSelected();\n  }\n\n  render() {\n    return (\n      <li className=\"leaf\" onClick={this.toggleSelected}>\n        <input type=\"checkbox\" value={this.props.l.selected} />\n        {this.props.l.swatch.length > 0 &&\n          <img src=\"data:{this.props.l.swatch}\" className=\"swatch\" />\n        }\n        <span className=\"layer-name\">{this.props.l.name}</span>\n\n        {this.props.children}\n      </li>\n    );\n  }\n}\n\nexport default class NestedLayers {\n\n  /*\n   * NestedLayers plugin\n   *\n   * Required Arguments\n   * hierarchy: LayerHierarchy object to represent; create this with L.layerHierarchy\n   * element: DOM element to attach to and render in\n   *\n   * Options\n   * n/a\n   */\n  constructor(hierarchy, element, options) {\n    if (typeof hierarchy == 'undefined') {\n      throw new Error('Missing hierarchy when creating NestedLayers control');\n    }\n    this.hierarchy = hierarchy;\n    if (typeof element == 'undefined') {\n      throw new Error('Missing element when creating NestedLayers control');\n    }\n    this.element = element;\n\n    // save the options\n    this._options = {};\n    Object.assign(this._options, options);\n\n    this._component = <NestedLayersComponent hierarchy={this.hierarchy} />\n\n    this._isAttached = false;\n\n    // bind to the DOM\n    this.attach();\n  }\n\n  get hierarchy() {\n    return this._hierarchy;\n  }\n  // shorthand convenience accessor\n  get h() {\n    return this.hierarchy;\n  }\n  set hierarchy(val) {\n    this._hierarchy = val;\n  }\n\n  get element() {\n    return this._element;\n  }\n  // shorthand convenience accessor\n  get el() {\n    return this.element;\n  }\n  set element(val) {\n    this._element = val;\n  }\n\n  get component() {\n    return this._component;\n  }\n  // short convenience accessor\n  get c() {\n    return this.component;\n  }\n  // no direct setting of 'component' from outside the class\n\n  get isAttached() {\n    return this._isAttached;\n  }\n  // no direct setting of 'isAttached' from outside the class\n  // the attach() and detach() methods handle this state\n\n  // bind to DOM\n  attach() {\n    if (!this.isAttachedz) {\n      ReactDOM.render(\n        this.component,\n        this.element\n      );\n    }\n    this._isAttached = true;\n  }\n\n  // unbind from DOM\n  detach() {\n    if (this.isAttached) {\n      ReactDOM.unmountComponentAtNode(this.element);\n    }\n    this._isAttached = true;\n  }\n\n}\n\n\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}