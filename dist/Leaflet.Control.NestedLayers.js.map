{"version":3,"sources":["Leaflet.Control.NestedLayers.js"],"names":["NestedLayersComponent","props","handleToggleSelected","layer","id","newHierarchy","state","hierarchy","getLayerByID","toggleSelected","setState","makeComponentFromLayer","componentChildren","children","length","map","makeLayerKey","toString","name","roots","rootLayers","components","i","push","Component","propTypes","instanceOf","isRequired","NestedLayerComponent","onToggleSelected","getSwatch","swatch","itemClassNames","leaf","enabled","disabled","selected","func","any","NestedLayers","element","options","Error","_options","followAncestorVisibility","propogateDeselectToChildren","followAncestorMutability","Object","assign","_component","_isAttached","attach","isAttached","render","component","unmountComponentAtNode","_hierarchy","val","_element"],"mappings":"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","file":"Leaflet.Control.NestedLayers.js","sourcesContent":["// import colors from 'colors';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport LayerHierarchy from './Leaflet.LayerHierarchy';\nimport NestedLayer from './Leaflet.NestedLayer';\nimport classnames from 'classnames';\n\nexport class NestedLayersComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hierarchy: this.props.hierarchy\n    }\n  }\n\n  static propTypes = {\n    hierarchy: PropTypes.instanceOf(LayerHierarchy).isRequired\n  }\n\n  makeLayerKey(layer) {\n    return (layer.id.toString + layer.name);\n  }\n\n  handleToggleSelected = (layer) => {\n    const id = layer.id;\n    const newHierarchy = this.state.hierarchy;\n    newHierarchy.getLayerByID(id).toggleSelected();\n    this.setState({\n      hierarchy: newHierarchy\n    });\n  }\n\n  makeComponentFromLayer = (layer) => {\n    // recursive function\n    // 'leaf' is the base case\n    // property initializer syntax + arrow function keeps the scope of 'this' through recursive calls\n    let componentChildren;\n\n    // branch: this layer has children\n    if (layer.children.length > 0) {\n      // leaves = layer.children.map(this.makeComponentFromLayer)\n      componentChildren = (\n        <ul className=\"branch\">\n          {layer.children.map(this.makeComponentFromLayer)}\n        </ul>\n      );\n    }\n\n    return (\n      <NestedLayerComponent layer={layer} onToggleSelected={this.handleToggleSelected} key={this.makeLayerKey(layer)}>\n        {componentChildren}\n      </NestedLayerComponent>\n    );\n\n    // // branch: this layer has children\n    // if (layer.children.length > 0) {\n    //   // recursively calls this function on each child (leaf)\n    //   // 'leaves' will be an array of JSX components (NestedLayerComponent) for each child (leaf)\n    //   const leaves = layer.children.map(this.makeComponentFromLayer);\n\n    //   return (\n    //     <NestedLayerComponent layer={layer} onToggleSelected={this.handleToggleSelected} key={this.makeLayerKey(layer)}>\n    //       <ul className=\"branch\">\n    //         {leaves}\n    //       </ul>\n    //     </NestedLayerComponent>\n    //   );\n    // } else {\n    // // leaf: this layer is just a leaf\n\n    //   return (\n    //     <NestedLayerComponent layer={layer} onToggleSelected={this.handleToggleSelected} key={this.makeLayerKey(layer)} />\n    //   )\n    // }\n  }\n\n  render() {\n    const roots = this.state.hierarchy.rootLayers;\n    let components = [];\n\n    for (let i = 0; i < roots.length; i++) {\n      components.push(this.makeComponentFromLayer(roots[i]));\n    }\n\n    return (\n      <div className=\"nested-layer-control-container\">\n        <h2>TOC CONTROL</h2>\n        <ul className=\"branch nested-layer-control\">\n          {components}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport class NestedLayerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  static propTypes = {\n    layer: PropTypes.instanceOf(NestedLayer).isRequired,\n    onToggleSelected: PropTypes.func.isRequired,\n    children: PropTypes.any\n  }\n\n  toggleSelected = () => {\n    // updates both the component state and the LayerHierarchy structure\n    this.props.onToggleSelected(this.props.layer);\n  }\n\n  getSwatch = () => {\n    return 'data:image/png;base64,' + this.props.layer.swatch;\n  }\n\n  render() {\n    const itemClassNames = classnames({\n      leaf: true,\n      enabled: this.props.layer.enabled,\n      disabled: this.props.layer.disabled\n    });\n    return (\n      <li className={itemClassNames}>\n        <input type=\"checkbox\" checked={this.props.layer.selected} />\n        {this.props.layer.swatch.length > 0 &&\n          <img src={this.getSwatch()} className=\"swatch\" />\n        }\n        <span className=\"layer-name\" onClick={this.toggleSelected}>{this.props.layer.name}</span>\n\n        {this.props.children}\n      </li>\n    );\n  }\n}\n\nexport default class NestedLayers {\n\n  /*\n   * NestedLayers plugin\n   *\n   * Required Arguments\n   * hierarchy: LayerHierarchy object to represent; create this with L.layerHierarchy\n   * element: DOM element to attach to and render in\n   *\n   * Options\n   * n/a\n   */\n  constructor(hierarchy, element, options) {\n\n    if (typeof hierarchy == 'undefined') {\n      throw new Error('Missing hierarchy when creating NestedLayers control');\n    }\n    this.hierarchy = hierarchy;\n    if (typeof element == 'undefined') {\n      throw new Error('Missing DOM element when creating NestedLayers control');\n    }\n    this.element = element;\n\n    // default options\n    this._options = {\n      // deselecting any ancestor makes its children invisible (without changing their selected state)\n      followAncestorVisibility: true,\n\n      // deselecting a parent also deselects children (by changing their state)\n      propogateDeselectToChildren: false,\n\n      // deselecting any ancestor disables its children (cannot change children's selected state)\n      followAncestorMutability: true\n    };\n\n    // overwrite defaults with passed options\n    Object.assign(this._options, options);\n\n    this._component = <NestedLayersComponent hierarchy={this.hierarchy} />\n\n    this._isAttached = false;\n\n    // bind to the DOM\n    this.attach();\n  }\n\n  get hierarchy() {\n    return this._hierarchy;\n  }\n  // shorthand convenience accessor\n  get h() {\n    return this.hierarchy;\n  }\n  set hierarchy(val) {\n    this._hierarchy = val;\n  }\n\n  get element() {\n    return this._element;\n  }\n  // shorthand convenience accessor\n  get el() {\n    return this.element;\n  }\n  set element(val) {\n    this._element = val;\n  }\n\n  get component() {\n    return this._component;\n  }\n\n  get isAttached() {\n    return this._isAttached;\n  }\n  // no direct setting of 'isAttached' from outside the class\n  // the attach() and detach() methods handle this state\n\n  get options() {\n    return this._options;\n  }\n\n  // bind to DOM\n  attach() {\n    if (!this.isAttached) {\n      ReactDOM.render(\n        this.component,\n        this.element\n      );\n    }\n    this._isAttached = true;\n  }\n\n  // unbind from DOM\n  detach() {\n    if (this.isAttached) {\n      ReactDOM.unmountComponentAtNode(this.element);\n    }\n    this._isAttached = true;\n  }\n\n}\n\n\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}