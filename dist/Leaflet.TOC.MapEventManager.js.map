{"version":3,"sources":["Leaflet.TOC.MapEventManager.js"],"names":["MapEventManager","maps","map","layer","callback","console","log","_leaflet_id","_addCallback","e","target","getZoom","id","callbacks","callbackList","_findMap","forEach","_findCallbacks","_layeraddHandler","entry","_addNewMap","handlers","_zoomendHandler","bind","_layerremoveHandler","_addMapHandlers","mapEntry","push","on","off"],"mappings":"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","file":"Leaflet.TOC.MapEventManager.js","sourcesContent":["// import * as NestedLayerTreeHelper from './Leaflet.TOC.NestedLayerTreeHelper';\n\nexport default class MapEventManager {\n\n  constructor() {\n    this.maps = {};\n    // this.maps = {\n    //   '[map1._leaflet_id]': {\n    //     map: 'MapObject',\n    //     handlers: {\n    //       'zoomend': function() {},\n    //       'layeradd': function() {},\n    //       'layerremove': function() {}\n    //     },\n    //     callbacks: {\n    //       '[LeafletLayer1._leaflet_id]': ['callback1'],\n    //       '[LeafletLayer2._leaflet_id]': ['callback2', 'callback2', ... ]\n    //     }\n    //   }\n    // };\n  }\n\n  bindLayerToMapChanges(map, layer, callback) {\n    console.log('MapEventManager binding layer', layer._leaflet_id, 'to map', map._leaflet_id);\n    this._addCallback(map, layer, callback);\n  }\n\n  // expects to be bound with .bind(this, map)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n  _zoomendHandler(map, e) {\n    // a zoom change needs to call all the callbacks\n    // because only the model can compute whether or not it is visible\n\n    console.log('MapEventManager detected zoom level changed to', e.target.getZoom());\n    let id;\n    let callbacks;\n    let callbackList = this._findMap(map).callbacks\n    for (id in callbackList) {\n      callbacks = callbackList[id];\n      if (callbacks) {\n        console.log('MapEventManager zoom found callbacks', callbacks);\n        callbacks.forEach((callback) => {\n          callback(e)\n        })\n      }\n    }\n  }\n\n  // expects to be bound with .bind(...)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n  _layeraddHandler(map, e) {\n    // a layer add/remove change needs only to call one handler:\n    // the handler corresponding to the layer that was added/removed\n\n    console.log('MapEventManager detected layer added/removed', e);\n    let callbacks = this._findCallbacks(map, e.layer)\n    if (callbacks) {\n      console.log('MapEventManager calling add/remove callbacks', callbacks);\n      callbacks.forEach((callback) => {\n        callback(e)\n      })\n    }\n  }\n\n  // expects to be bound with .bind(...)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n  _layerremoveHandler(map, e) {\n    this._layeraddHandler(map, e);\n  }\n\n  // adds a new map if the specified one does not exist\n  _findMap(map) {\n    let entry = this.maps[map._leaflet_id];\n    if (!entry) {\n      entry = this._addNewMap(map);\n    }\n    return entry;\n  }\n\n  _addNewMap(map) {\n    let entry = this.maps[map._leaflet_id] = {\n      map,\n      handlers: {\n        'zoomend': this._zoomendHandler.bind(this, map),\n        'layeradd': this._layeraddHandler.bind(this, map),\n        'layerremove': this._layerremoveHandler.bind(this, map)\n      },\n      callbacks: {}\n    };\n    this._addMapHandlers(map);\n    return entry;\n  }\n\n  _findCallbacks(map, layer) {\n    let mapEntry = this._findMap(map);\n    if (!mapEntry.callbacks[layer._leaflet_id]) {\n      mapEntry.callbacks[layer._leaflet_id] = [];\n    }\n    console.log('MapEventManager found callbacks for', layer._leaflet_id, mapEntry.callbacks[layer._leaflet_id]);\n    return mapEntry.callbacks[layer._leaflet_id];\n  }\n\n  _addCallback(map, layer, callback) {\n    let callbacks = this._findCallbacks(map, layer);\n    callbacks.push(callback);\n    console.log('MapEventManager adding callback to layer (+ result)', layer._leaflet_id, callbacks);\n  }\n\n  _addMapHandlers(map) {\n    console.log('MapEventManager adding handlers to map');\n    // http://leafletjs.com/reference-1.2.0.html#evented-on\n    map.on(this._findMap(map).handlers);\n  }\n\n  _removeMapHandlers(map) {\n    console.log('MapEventManager removing handlers from map');\n    // http://leafletjs.com/reference-1.2.0.html#evented-off\n    map.off(this._findMap(map).handlers);\n  }\n\n}\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}