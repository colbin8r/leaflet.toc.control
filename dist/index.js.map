{"version":3,"sources":["index.js"],"names":["NestedLayerTreeHelper","exports","NestedLayer","NestedDynamicMapLayer","MapServerParser","MapSymbology","MapSymbol","Control","namespace","Object","assign","nestedLayer","args","nestedDynamicMapLayer","mapServerParser","mapSymbology","mapSymbol","control","window","L","TOC","LeafletTOC","module"],"mappings":";;AACA;;;;AACA;;;;AACA;;IAAYA,qB;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA;AACA;AACA;;AAEA,IAAIC,WAAU;AACZC,mCADY;AAEZC,6CAFY;AAGZH,8CAHY;AAIZI,uCAJY;AAKZC,oCALY;AAMZC,kCANY;AAOZC;AACA;AACA;AACA;;;AAGF;AACA;AAdc,CAAd,C,CAZA;AA2BA,IAAIC,YAAYC,OAAOC,MAAP,CAAc,EAAd,EAAkBT,QAAlB,CAAhB;;AAEA;AACA;AACAO,UAAUG,WAAV,GAAwB,SAASA,WAAT,GAA8B;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AACpD,4CAAWX,SAAQC,WAAnB,gBAAkCU,IAAlC;AACD,CAFD;AAGAJ,UAAUK,qBAAV,GAAkC,SAASA,qBAAT,GAAwC;AAAA,qCAAND,IAAM;AAANA,QAAM;AAAA;;AACxE,4CAAWX,SAAQE,qBAAnB,gBAA4CS,IAA5C;AACD,CAFD;AAGA;AACAJ,UAAUM,eAAV,GAA4B,SAASA,eAAT,GAAkC;AAAA,qCAANF,IAAM;AAANA,QAAM;AAAA;;AAC5D,4CAAWX,SAAQG,eAAnB,gBAAsCQ,IAAtC;AACD,CAFD;AAGAJ,UAAUO,YAAV,GAAyB,SAASA,YAAT,GAA+B;AAAA,qCAANH,IAAM;AAANA,QAAM;AAAA;;AACtD,4CAAWX,SAAQI,YAAnB,gBAAmCO,IAAnC;AACD,CAFD;AAGAJ,UAAUQ,SAAV,GAAsB,SAASA,SAAT,GAA4B;AAAA,qCAANJ,IAAM;AAANA,QAAM;AAAA;;AAChD,4CAAWX,SAAQK,SAAnB,gBAAgCM,IAAhC;AACD,CAFD;AAGAJ,UAAUS,OAAV,GAAoB,SAASA,OAAT,GAA0B;AAAA,qCAANL,IAAM;AAANA,QAAM;AAAA;;AAC5C,4CAAWX,SAAQM,OAAnB,gBAA8BK,IAA9B;AACD,CAFD;;AAIA,IAAI,OAAOM,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,OAAOC,CAAd,KAAoB,WAAzD,EAAsE;AACpE;AACAD,SAAOC,CAAP,CAASC,GAAT,GAAeZ,SAAf;AACA;AACA;AACAU,SAAOC,CAAP,CAASZ,OAAT,CAAiBa,GAAjB,GAAuBZ,UAAUD,OAAjC;AACD,CAND,MAMO,IAAI,OAAOW,MAAP,KAAkB,WAAtB,EAAmC;AACxC;AACAA,SAAOG,UAAP,GAAoBb,SAApB;AACD,CAHM,MAGA;AACL;AACAP,WAAQkB,CAAR,GAAY;AACVC,SAAKZ;AADK,GAAZ;AAGD;;AAEDc,OAAOrB,OAAP,GAAiBA,QAAjB","file":"index.js","sourcesContent":["/* global window */\nimport NestedLayer from './Leaflet.TOC.NestedLayer';\nimport NestedDynamicMapLayer from './Leaflet.TOC.NestedDynamicMapLayer';\nimport * as NestedLayerTreeHelper from './Leaflet.TOC.NestedLayerTreeHelper';\nimport MapServerParser from './Leaflet.TOC.MapServerParser';\nimport MapSymbology from './Leaflet.TOC.MapSymbology';\nimport MapSymbol from './Leaflet.TOC.MapSymbol';\nimport Control from './Leaflet.TOC.Control';\n// import LayerHierarchy from './Leaflet.LayerHierarchy';\n// import MapServerParser from './Leaflet.LayerHierarchy.MapServerParser';\n// import NestedLayers from './Leaflet.Control.NestedLayers';\n\nlet exports = {\n  NestedLayer,\n  NestedDynamicMapLayer,\n  NestedLayerTreeHelper,\n  MapServerParser,\n  MapSymbology,\n  MapSymbol,\n  Control\n  // LayerHierarchy,\n  // MapServerParser,\n  // NestedLayers\n}\n\n// decide later whether to attach to the global L by attaching everything we would attach\n// to the global L to a separate 'namespace' object\nlet namespace = Object.assign({}, exports);\n\n// create the standard factory methods that Leaflet plugins are supposed to expose\n// using ES6 spread notation means always up-to-date constructor parameters\nnamespace.nestedLayer = function nestedLayer(...args) {\n  return new exports.NestedLayer(...args);\n};\nnamespace.nestedDynamicMapLayer = function nestedDynamicMapLayer(...args) {\n  return new exports.NestedDynamicMapLayer(...args);\n}\n// no factory for NestedLayerTreeHelper\nnamespace.mapServerParser = function mapServerParser(...args) {\n  return new exports.MapServerParser(...args);\n}\nnamespace.mapSymbology = function mapSymbology(...args) {\n  return new exports.MapSymbology(...args);\n}\nnamespace.mapSymbol = function mapSymbol(...args) {\n  return new exports.MapSymbol(...args);\n}\nnamespace.control = function control(...args) {\n  return new exports.Control(...args);\n}\n\nif (typeof window !== 'undefined' && typeof window.L !== 'undefined') {\n  // global L and window present\n  window.L.TOC = namespace;\n  // specially alias plugin (a Leaflet control) to the L.Control.TOC\n  // to emulate other control plugins' best practice\n  window.L.Control.TOC = namespace.Control;\n} else if (typeof window !== 'undefined') {\n  // global L and window missing\n  window.LeafletTOC = namespace;\n} else {\n  // if there is no global window, stay out of the global namespace\n  exports.L = {\n    TOC: namespace\n  };\n}\n\nmodule.exports = exports;\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}