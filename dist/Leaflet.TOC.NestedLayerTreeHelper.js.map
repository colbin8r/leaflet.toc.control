{"version":3,"sources":["Leaflet.TOC.NestedLayerTreeHelper.js"],"names":["getLayerByUniqueProp","getLayerByID","getLayerByLayerID","applyStateChangeToLayer","applyStateChangeToTree","validateTreeEnabledState","tree","key","val","i","length","hasChildren","result","children","id","layer","change","Object","assign","console","log","selected","enabled"],"mappings":";;;;;QAIgBA,oB,GAAAA,oB;QAwBAC,Y,GAAAA,Y;QAIAC,iB,GAAAA,iB;QAIAC,uB,GAAAA,uB;QAYAC,sB,GAAAA,sB;QAUAC,wB,GAAAA,wB;AA1DhB;;AAEA;AACA;AACO,SAASL,oBAAT,CAA8BM,IAA9B,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8C;AACnD,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,KAAKI,MAAzB,EAAiCD,GAAjC,EAAsC;;AAEpC,QAAIH,KAAKG,CAAL,EAAQF,GAAR,MAAiBC,GAArB,EAA0B;AACxB;AACA,aAAOF,KAAKG,CAAL,CAAP;AAED,KAJD,MAIO,IAAIH,KAAKG,CAAL,EAAQE,WAAZ,EAAyB;;AAE9B;AACA,UAAIC,SAASZ,qBAAqBM,KAAKG,CAAL,EAAQI,QAA7B,EAAuCN,GAAvC,EAA4CC,GAA5C,CAAb;AACA,UAAII,WAAW,IAAf,EAAqB;AACnB;AACA,eAAOA,MAAP;AACD;AAEF;AAEF;;AAED;AACA,SAAO,IAAP;AACD;;AAEM,SAASX,YAAT,CAAsBK,IAAtB,EAA4BQ,EAA5B,EAAgC;AACrC,SAAOd,qBAAqBM,IAArB,EAA2B,IAA3B,EAAiCQ,EAAjC,CAAP;AACD;;AAEM,SAASZ,iBAAT,CAA2BI,IAA3B,EAAiCQ,EAAjC,EAAqC;AAC1C,SAAOd,qBAAqBM,IAArB,EAA2B,SAA3B,EAAsCQ,EAAtC,CAAP;AACD;;AAEM,SAASX,uBAAT,CAAiCY,KAAjC,EAAwCC,MAAxC,EAAgD;AACrD;AACA;AACA;AACAC,SAAOC,MAAP,CAAcH,KAAd,EAAqBC,MAArB;AACD;;AAED;;;;;AAKO,SAASZ,sBAAT,CAAgCE,IAAhC,EAAsCU,MAAtC,EAA8C;AACnD,OAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIH,KAAKI,MAAzB,EAAiCD,GAAjC,EAAsC;AACpCN,4BAAwBG,KAAKG,CAAL,CAAxB,EAAiCO,MAAjC;;AAEA,QAAIV,KAAKG,CAAL,EAAQE,WAAZ,EAAyB;AACvBP,6BAAuBE,KAAKG,CAAL,EAAQI,QAA/B,EAAyCG,MAAzC;AACD;AACF;AACF;;AAEM,SAASX,wBAAT,CAAkCC,IAAlC,EAAwC;AAC7Ca,UAAQC,GAAR,CAAY,kCAAZ,EAAgDd,IAAhD;AACA,OAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,KAAKI,MAAzB,EAAiCD,GAAjC,EAAsC;AACpCU,YAAQC,GAAR,CAAY,sBAAZ,EAAoCd,KAAKG,CAAL,EAAQY,QAA5C;AACA,QAAIf,KAAKG,CAAL,EAAQY,QAAR,IAAoBf,KAAKG,CAAL,EAAQI,QAAR,CAAiBH,MAAjB,GAA0B,CAAlD,EAAqD;AACnDN,6BAAuBE,KAAKG,CAAL,EAAQI,QAA/B,EAAyC,EAAES,SAAS,IAAX,EAAzC;AACAjB,+BAAyBC,KAAKG,CAAL,EAAQI,QAAjC;AACD;AACF;AACF;;AAED;;;;;;;AAOA;;AAEA","file":"Leaflet.TOC.NestedLayerTreeHelper.js","sourcesContent":["// import { assign } from 'lodash';\n\n// recursively traverses down the tree looking for the first matching NestedLayer\n// \"tree\" here is expected to be an array of NestedLayers\nexport function getLayerByUniqueProp(tree, key, val) {\n  for (let i = 0; i < tree.length; i++) {\n\n    if (tree[i][key] === val) {\n      // base case A: we found a matching element at the root of the tree\n      return tree[i];\n\n    } else if (tree[i].hasChildren) {\n\n      // recursive step: search the element's tree\n      let result = getLayerByUniqueProp(tree[i].children, key, val);\n      if (result !== null) {\n        // base case B: element found within a subtree\n        return result;\n      }\n\n    }\n\n  }\n\n  // base case C: not found\n  return null;\n}\n\nexport function getLayerByID(tree, id) {\n  return getLayerByUniqueProp(tree, 'id', id);\n}\n\nexport function getLayerByLayerID(tree, id) {\n  return getLayerByUniqueProp(tree, 'layerID', id);\n}\n\nexport function applyStateChangeToLayer(layer, change) {\n  // copies each key/value in \"change\" onto \"layer\"\n  // triggers the getters/setters in NestedLayer\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n  Object.assign(layer, change);\n}\n\n/**\n * Applies a state change (or changes) to a tree or substree\n * @param  {NestedLayer[]} tree   Tree or subtree of NestedLayers\n * @param  {Object} change A key/value pair of state changes to apply to each layer in the tree\n */\nexport function applyStateChangeToTree(tree, change) {\n  for (let i = 0; i < tree.length; i++) {\n    applyStateChangeToLayer(tree[i], change);\n\n    if (tree[i].hasChildren) {\n      applyStateChangeToTree(tree[i].children, change);\n    }\n  }\n}\n\nexport function validateTreeEnabledState(tree) {\n  console.log('validating enabled state of tree', tree);\n  for (let i = 0; i < tree.length; i++) {\n    console.log('is tree[i] selected?', tree[i].selected);\n    if (tree[i].selected && tree[i].children.length > 0) {\n      applyStateChangeToTree(tree[i].children, { enabled: true });\n      validateTreeEnabledState(tree[i].children);\n    }\n  }\n}\n\n/**\n * Modifies (if necessary) the enabled state of layers in the tree according to the following rules:\n * 1. All the descendents of an enabled layer are also enabled.\n * 2. All the descendents of a disabled layer are also disabled.\n * @param  {[type]} tree [description]\n * @return {[type]}      [description]\n */\n// export function validateEnabledStates(tree) {\n\n// }\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}