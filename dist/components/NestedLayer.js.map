{"version":3,"sources":["components/NestedLayer.js"],"names":["NestedLayer","props","_mapEventHandler","e","console","log","visibilityChange","toggleSelected","layer","toggleCollapsed","setState","collapsed","state","friendlyLayerType","constructor","name","replace","eventManager","map","bindLayerToMapChanges","disabled","classes","leaf","enabled","selected","deselected","visible","invisible","expanded","hasChildren","children","id","symbology","Component","propTypes","instanceOf","isRequired","func"],"mappings":"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","file":"NestedLayer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport MapEventManager from '../Leaflet.TOC.MapEventManager';\nimport NL from '../Leaflet.TOC.NestedLayer';\nimport MapSymbology from './MapSymbology';\n\nexport default class NestedLayer extends React.Component {\n\n  static propTypes = {\n    layer: PropTypes.instanceOf(NL).isRequired,\n    toggleSelected: PropTypes.func.isRequired,\n    visibilityChange: PropTypes.func.isRequired,\n    eventManager: PropTypes.instanceOf(MapEventManager).isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.eventManager = this.props.eventManager;\n    console.log('NestedLayer received event manager', this.eventManager);\n    let map = this.props.layer.map;\n    let layer = this.props.layer.layer;\n    console.log('NestedLayer asking event manager to bind layer', layer);\n    this.eventManager.bindLayerToMapChanges(map, layer, this._mapEventHandler);\n\n    this.state = {\n      collapsed: true\n    }\n\n    // this.state = {\n    //   _mapEventListeners: {\n    //     'zoomend': this._handleMapZoomChange,\n    //     'layeradd': this._handleMapLayerChange,\n    //     'layerremove': this._handleMapLayerChange\n    //   }\n    // };\n  }\n\n  _mapEventHandler = (e) => {\n    console.log('<NestedLayer /> map event handler', e);\n    this.props.visibilityChange();\n  }\n\n  // // add event listener(s) to map\n  // bindToMapEvents() {\n  //   console.log('binding to map events');\n\n  //   this.props.layer.map.on(this.state._mapEventListeners);\n  // }\n\n  // // remove event listener(s) from map\n  // unbindFromMapEvents() {\n  //   console.log('unbinding from map events');\n  //   this.props.layer.map.off(this.state._mapEventListeners);\n  // }\n\n  // // listens to zoomend\n  // // http://leafletjs.com/reference-1.2.0.html#map-zoomend\n  // _handleMapZoomChange = (e) => {\n  //   console.log('zoom level changed to', e.target.getZoom());\n  //   this.props.visibilityChange();\n  // }\n\n  // // listens to layeradd and layerremove\n  // // http://leafletjs.com/reference-1.2.0.html#map-layeradd\n  // // http://leafletjs.com/reference-1.2.0.html#map-layeradd\n  // _handleMapLayerChange = (e) => {\n  //   console.log('_handleMapLayerChange handles this layer?', e.layer._leaflet_id == this.props.layer.layer._leaflet_id);\n  //   // if the change was to this layer (i.e. they share IDs)\n  //   // this check helps throttle down React render() calls\n  //   if (e.layer._leaflet_id == this.props.layer.layer._leaflet_id) {\n  //     console.log('_handleMapLayerChange MATCH', e.layer, this.props.layer.layer);\n  //     this.props.visibilityChange();\n  //   }\n  // }\n\n  // componentDidMount() {\n  //   this.bindToMapEvents();\n  // }\n\n  // componentWillUnmount() {\n  //   this.unbindFromMapEvents();\n  // }\n\n  toggleSelected = () => {\n    this.props.toggleSelected(this.props.layer);\n  }\n\n  visibilityChange = () => {\n    this.props.visibilityChange();\n  }\n\n  toggleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n    console.log('<NestedLayer /> toggle collapse:', this.state);\n  }\n\n  friendlyLayerType = () => {\n    return this.props.layer.constructor.name.replace('Nested', '');\n  }\n\n  render() {\n    const disabled = (this.props.layer.disabled ? 'disabled' : '');\n    const classes = classnames({\n      leaf: true,\n      enabled: this.props.layer.enabled,\n      disabled: this.props.layer.disabled,\n      selected: this.props.layer.selected,\n      deselected: this.props.layer.deselected,\n      visible: this.props.layer.visible,\n      invisible: !this.props.layer.visible,\n      collapsed: this.state.collapsed,\n      expanded: !this.state.collapsed,\n      'has-children': this.props.layer.hasChildren,\n      'has-no-children': !this.props.layer.hasChildren\n    });\n\n    let children;\n\n    if (this.props.layer.hasChildren) {\n      // each child layer turns into a NestedLayer\n      children = this.props.layer.children.map((layer) => <NestedLayer layer={layer}\n                                                                       toggleSelected={this.props.toggleSelected}\n                                                                       visibilityChange={this.props.visibilityChange}\n                                                                       eventManager={this.eventManager}\n                                                                       key={layer.id} />);\n      // wrap the children with a <ul>\n      children = (\n        <ul className=\"branch\">\n          {children}\n        </ul>\n      )\n    }\n\n    return (\n      <li className={classes}>\n        <div className=\"layer-collapse-toggle\" onClick={this.toggleCollapsed}>\n          <i className=\"layer-collapse-icon-collapse\">→</i>\n          <i className=\"layer-collapse-icon-expand\">↓</i>\n        </div>\n        <input type=\"checkbox\" checked={this.props.layer.selected} disabled={disabled} onChange={this.toggleSelected} />\n        <span className=\"layer-name\">{this.props.layer.name}</span>\n        <span className=\"layer-type\">{this.friendlyLayerType()}</span>\n        <MapSymbology symbology={this.props.layer.symbology} />\n        <span className=\"layer-collapse-content\">\n          {children}\n        </span>\n      </li>\n    );\n  }\n\n}\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}