{"version":3,"sources":["components/NestedLayer.js"],"names":["NestedLayer","toggleSelected","props","layer","classes","leaf","enabled","disabled","selected","deselected","children","hasChildren","map","id","name","Component","propTypes","instanceOf","isRequired","func"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,W;;;;;;;;;;;;;;gMAQnBC,c,GAAiB,YAAM;AACrB,YAAKC,KAAL,CAAWD,cAAX,CAA0B,MAAKC,KAAL,CAAWC,KAArC;AACD,K;;;;;6BAEQ;AAAA;;AACP,UAAMC,UAAU,0BAAW;AACzBC,cAAM,IADmB;AAEzBC,iBAAS,KAAKJ,KAAL,CAAWC,KAAX,CAAiBG,OAFD;AAGzBC,kBAAU,KAAKL,KAAL,CAAWC,KAAX,CAAiBI,QAHF;AAIzBC,kBAAU,KAAKN,KAAL,CAAWC,KAAX,CAAiBK,QAJF;AAKzBC,oBAAY,KAAKP,KAAL,CAAWC,KAAX,CAAiBM;AALJ,OAAX,CAAhB;;AAQA,UAAIC,iBAAJ;;AAEA,UAAI,KAAKR,KAAL,CAAWC,KAAX,CAAiBQ,WAArB,EAAkC;AAChC;AACAD,mBAAW,KAAKR,KAAL,CAAWC,KAAX,CAAiBO,QAAjB,CAA0BE,GAA1B,CAA8B,UAACT,KAAD;AAAA,iBAAW,8BAAC,WAAD,IAAa,OAAOA,KAApB;AACa,4BAAgB,OAAKD,KAAL,CAAWD,cADxC;AAEa,iBAAKE,MAAMU,EAFxB,GAAX;AAAA,SAA9B,CAAX;AAGA;AACAH,mBACE;AAAA;AAAA,YAAI,WAAU,QAAd;AACGA;AADH,SADF;AAKD;;AAED,aACE;AAAA;AAAA,UAAI,WAAWN,OAAf;AACE,iDAAO,MAAK,UAAZ,EAAuB,SAAS,KAAKF,KAAL,CAAWC,KAAX,CAAiBK,QAAjD,EAA2D,UAAU,KAAKP,cAA1E,GADF;AAEE;AAAA;AAAA,YAAM,WAAU,YAAhB;AAA8B,eAAKC,KAAL,CAAWC,KAAX,CAAiBW;AAA/C,SAFF;AAIGJ;AAJH,OADF;AASD;;;;EA7CsC,gBAAMK,S;;AAA1Bf,W,CAEZgB,S,GAAY;AACjBb,SAAO,oBAAUc,UAAV,uBAAyBC,UADf;AAEjBjB,kBAAgB,oBAAUkB,IAAV,CAAeD;AAC/B;AAHiB,C;kBAFAlB,W","file":"NestedLayer.js","sourcesContent":["import NL from '../Leaflet.TOC.NestedLayer';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default class NestedLayer extends React.Component {\n\n  static propTypes = {\n    layer: PropTypes.instanceOf(NL).isRequired,\n    toggleSelected: PropTypes.func.isRequired,\n    // toggleEnabled: PropTypes.func.isRequired\n  };\n\n  toggleSelected = () => {\n    this.props.toggleSelected(this.props.layer);\n  }\n\n  render() {\n    const classes = classnames({\n      leaf: true,\n      enabled: this.props.layer.enabled,\n      disabled: this.props.layer.disabled,\n      selected: this.props.layer.selected,\n      deselected: this.props.layer.deselected\n    });\n\n    let children;\n\n    if (this.props.layer.hasChildren) {\n      // each child layer turns into a NestedLayer\n      children = this.props.layer.children.map((layer) => <NestedLayer layer={layer}\n                                                                       toggleSelected={this.props.toggleSelected}\n                                                                       key={layer.id} />);\n      // wrap the children with a <ul>\n      children = (\n        <ul className=\"branch\">\n          {children}\n        </ul>\n      )\n    }\n\n    return (\n      <li className={classes} >\n        <input type=\"checkbox\" checked={this.props.layer.selected} onChange={this.toggleSelected} />\n        <span className=\"layer-name\">{this.props.layer.name}</span>\n\n        {children}\n\n      </li>\n    );\n  }\n\n}\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}