{"version":3,"sources":["components/LeafletTOC.js"],"names":["LeafletTOC","props","toggleSelected","layer","setState","layers","state","visibilityChange","console","log","eventManager","window","em","map","id","title","Component","propTypes","arrayOf","instanceOf","isRequired","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;AALA;;IAOqBA,U;;;AAOnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAGjB;AAHiB,wHACXA,KADW;;AAAA,UAanBC,cAbmB,GAaF,UAACC,KAAD,EAAW;AAC1B;AACAA,YAAMD,cAAN;AACA,YAAKE,QAAL,CAAc,EAAEC,QAAQ,MAAKC,KAAL,CAAWD,MAArB,EAAd;AACD,KAjBkB;;AAAA,UAmBnBE,gBAnBmB,GAmBA,sBAAS,YAAM;AAChCC,cAAQC,GAAR,CAAY,8BAAZ;AACA,YAAKL,QAAL,CAAc,EAAEC,QAAQ,MAAKC,KAAL,CAAWD,MAArB,EAAd;AACD,KAHkB,CAnBA;AAIjB,UAAKC,KAAL,GAAa;AACXD,cAAQJ,MAAMI;AADH,KAAb;;AAIA,UAAKK,YAAL,GAAoB,0BAApB;AACAC,WAAOC,EAAP,GAAY,MAAKF,YAAjB,CATiB,CASc;AAC/BF,YAAQC,GAAR,CAAY,kCAAZ,EAAgD,MAAKC,YAArD;AAViB;AAWlB;;;;;;AAaD;AACA;AACA;AACA;AACA;AACA;;0CAEsB;AACpBF,cAAQC,GAAR,CAAY,+CAAZ;AACD;;;6BAEQ;AAAA;;AACPD,cAAQC,GAAR,CAAY,yCAAZ,EAAuD,KAAKC,YAA5D;;AAEA,UAAIL,SAAS,KAAKC,KAAL,CAAWD,MAAX,CAAkBQ,GAAlB,CAAsB,UAACV,KAAD;AAAA,eAAW,uDAAa,OAAOA,KAApB;AACa,0BAAgB,OAAKD,cADlC;AAEa,4BAAkB,OAAKK,gBAFpC;AAGa,wBAAc,OAAKG,YAHhC;AAIa,eAAKP,MAAMW,EAJxB,GAAX;AAAA,OAAtB,CAAb;;AAMA,aACE;AAAA;AAAA,UAAK,WAAU,uBAAf;AACE;AAAA;AAAA;AAAK,eAAKb,KAAL,CAAWc;AAAhB,SADF;AAEE;AAAA;AAAA,YAAI,WAAU,QAAd;AACGV;AADH;AAFF,OADF;AAQD;;;;EA3DqC,gBAAMW,S;;AAAzBhB,U,CAEZiB,S,GAAY;AACjBZ,UAAQ,oBAAUa,OAAV,CAAkB,oBAAUC,UAAV,sBAAlB,EAA4CC,UADnC;AAEjBL,SAAO,oBAAUM,MAAV,CAAiBD;AAFP,C;kBAFApB,U","file":"LeafletTOC.js","sourcesContent":["import NestedLayer from './NestedLayer';\nimport NL from '../Leaflet.TOC.NestedLayer';\n// import NestedLayerTreeHelper from '../Leaflet.TOC.NestedLayerTreeHelper';\n\nimport MapEventManager from '../Leaflet.TOC.MapEventManager';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\n\nexport default class LeafletTOC extends React.Component {\n\n  static propTypes = {\n    layers: PropTypes.arrayOf(PropTypes.instanceOf(NL)).isRequired,\n    title: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    // the initial state is a reference to the layers prop\n    this.state = {\n      layers: props.layers\n    };\n\n    this.eventManager = new MapEventManager();\n    window.em = this.eventManager; // FOR DEBUGGING\n    console.log('LeafletTOC created event manager', this.eventManager);\n  }\n\n  toggleSelected = (layer) => {\n    // let layers = this.state.layers;\n    layer.toggleSelected();\n    this.setState({ layers: this.state.layers });\n  }\n\n  visibilityChange = debounce(() => {\n    console.log('visibilityChange (debounced)');\n    this.setState({ layers: this.state.layers });\n  })\n\n  // toggleEnabled = (layer) => {\n  //   console.log('toggling enabled state of', layer);\n  //   layer.toggleEnabled();\n  //   this.setState({ layers: this.state.layers });\n  // }\n  //\n\n  componentWillUpdate() {\n    console.log('LeafletTOC componentWillUpdate (state change)');\n  }\n\n  render() {\n    console.log('LeafletTOC rendering with event manager', this.eventManager);\n\n    let layers = this.state.layers.map((layer) => <NestedLayer layer={layer}\n                                                               toggleSelected={this.toggleSelected}\n                                                               visibilityChange={this.visibilityChange}\n                                                               eventManager={this.eventManager}\n                                                               key={layer.id} />);\n\n    return (\n      <div className=\"leaflet-toc-container\">\n        <h2>{this.props.title}</h2>\n        <ul className=\"branch\">\n          {layers}\n        </ul>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":"/mnt/c/dev/Leaflet.Control.NestedLayers/src"}